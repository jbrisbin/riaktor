/*
 * Copyright (c) 2011-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
task wrapper(type: Wrapper, description: "Create a Gradle self-download wrapper") {
    group = 'Project Setup'
    gradleVersion = "$gradleVersion"
}

subprojects { subproject ->
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'groovy'

    ext.optionalDeps = []
    ext.providedDeps = []

    ext.optional = { optionalDeps << it }
    ext.provided = { providedDeps << it }


    install {
        repositories.mavenInstaller {
            customizePom(pom, subproject)
        }
    }
}

def customizePom(def pom, def gradleProject) {
    pom.whenConfigured { generatedPom ->
        // respect 'optional' and 'provided' dependencies
        def deps = gradleProject.configurations.runtime.allDependencies
        def optionalDeps = deps.findAll { dep ->
            dep.asDynamicObject.hasProperty('optional') && dep.optional
        }
        def providedDeps = deps.findAll { dep ->
            dep.asDynamicObject.hasProperty('provided') && dep.provided
        }
        generatedPom.dependencies.each { mavenDep ->
            mavenDep.optional = optionalDeps.any { optionalDep ->
                optionalDep.group == mavenDep.groupId &&
                        optionalDep.name == mavenDep.artifactId &&
                        optionalDep.version == mavenDep.version
            }
            boolean isProvided = providedDeps.any { providedDep ->
                providedDep.group == mavenDep.groupId &&
                        providedDep.name == mavenDep.artifactId &&
                        providedDep.version == mavenDep.version
            }
            if (isProvided) {
                mavenDep.scope = 'provided'
            }
        }

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            url = 'https://github.com/jbrisbin/riaktor'
            organization {
                name = 'riaktor'
                url = 'http://github.com/jbrisbin/riaktor'
            }
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                url = 'https://github.com/jbrisbin/riaktor'
                connection = 'scm:git:git://github.com/jbrisbin/riaktor.get'
                developerConnection = 'scm:git:git://github.com/jbrisbin/riaktor.git'
            }
            developers {
                developer {
                    id = 'jbrisbin'
                    name = 'Jon Brisbin'
                    email = 'jon@jbrisbin.com'
                }
            }
        }
    }
}